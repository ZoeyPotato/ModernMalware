using UnityEngine;
using System.Collections;

public class Pickup : MonoBehaviour
{

    public enum PickupType
    {
        kHealthIncrease = 0,
        kMaxHealthIncrease = 1,
        kMeleeCooldownDecrease = 2,
        kMeleeDamageIncrease = 3,
        kRangedCooldownDecrease = 4,
        kRangedDamageIncrease = 5
    };

    public PickupType pickupType = PickupType.kHealthIncrease;
    public float affectedWorth = 1.0f;

    // Minimums
    private const float kMinimumMeleeCooldown = 0.01f;
    private const float kMinimumRangedCooldown = 0.1f;

    // Maximums
    private const float kMaximumHealth = 1000.0f;
    private const float kMaximumTotalHealth = 1000.0f;
    private const float kMaximumMeleeDamage = 3.0f;
    private const float kMaximumRangedDamage = 20.0f;


    // Use this for initialization
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {

    }

    protected void OnTriggerEnter2D(Collider2D other)
    {

        if (other.name == "Player")
        {
            bool isPickup = true;
            if (pickupType == PickupType.kHealthIncrease)
            {
                Player.Instance.GetComponent<Health>().CurHitPoints++;
                if (Player.Instance.GetComponent<Health>().CurHitPoints > Player.Instance.GetComponent<Health>().TotalHitPoints)
                {
                    Player.Instance.GetComponent<Health>().CurHitPoints = Player.Instance.GetComponent<Health>().TotalHitPoints;
                }
            }
            else if (pickupType == PickupType.kMaxHealthIncrease)
            {
                float originalRatio = (float)Player.Instance.GetComponent<Health>().CurHitPoints / (float)Player.Instance.GetComponent<Health>().TotalHitPoints;
                Player.Instance.GetComponent<Health>().TotalHitPoints += (int)affectedWorth;
                Player.Instance.GetComponent<Health>().CurHitPoints = (int)(originalRatio * (float)Player.Instance.GetComponent<Health>().TotalHitPoints);
            }
            else if (pickupType == PickupType.kMeleeCooldownDecrease)
            {
                Player.Instance.meleeAttackPeriod = Mathf.Max(Player.Instance.meleeAttackPeriod - affectedWorth, kMinimumMeleeCooldown);
            }
            else if (pickupType == PickupType.kMeleeDamageIncrease)
            {
                Player.Instance.GetComponentInChildren<MeleeAttack>().damage = (int)Mathf.Min(affectedWorth, kMaximumMeleeDamage);
            }
            else if (pickupType == PickupType.kRangedCooldownDecrease)
            {
                // ensure doesn't go below lowest acceptable value
                Player.Instance.shootingRate = Mathf.Max(Player.Instance.shootingRate - affectedWorth, kMinimumRangedCooldown);
            }
            else if (pickupType == PickupType.kRangedDamageIncrease)
            {
                Player.Instance.maximumProjectileDamage = Mathf.Min(Player.Instance.maximumProjectileDamage + affectedWorth, kMaximumRangedDamage);
            }
            else
            {
                isPickup = false;
            }
            if (isPickup)
            {
                SoundEffectsHelper.Instance.MakePickupSound();
            }
            Destroy(gameObject);
        }
    }
}
