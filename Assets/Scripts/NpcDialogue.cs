using UnityEngine;
using System.Collections;
using System.Text.RegularExpressions;

public class NpcDialogue : MonoBehaviour
{

    public Transform player;
    public GUIText talkTextGUI;
    public float textScrollSpeed = 7.0f;
    public GUITexture[] textures;
    public string[] talkLines;
    public bool isQuestable = true;
    public bool isTalking = false;
    private bool isTextScrolling = false;
    private int currentLine = 0;
    private Player thePlayer;

    private static string kQuestIncompleteMessage = "Quest Incomplete";
    private static string kQuestCompleteMessage = "Quest Complete";
    public static bool playerTalking = false;
    private const int kMaxLineLength = 92;
	// Use this for initialization
	void Start ()
    {
        if (gameObject.GetComponent<KillEnemyQuest>() != null)
            isQuestable = true;
        else
            isQuestable = false;
        if (textures.Length < talkLines.Length)
        {
            Debug.LogError("The number of textures must be equal to or greater than the number of talking lines.");
            return;
        }

        for (int i = 0; i < textures.Length; ++i)
        {
            textures[i].enabled = false;
        }

        // Set the player name:
        for (int i = 0; i < talkLines.Length; ++i)
        {
            talkLines[i] = Regex.Replace(talkLines[i], "PLAYERNAME", Player.playerName);
        }

        // Ensure dialogue does not overrun the window:
        for (int i = 0; i < talkLines.Length; ++i)
        {
            talkLines[i] = Regex.Replace(talkLines[i], "(.{" + kMaxLineLength + "})", "$1" + System.Environment.NewLine);
        }
	}

    void OnTriggerStay2D(Collider2D other)
    {
        //Debug.Log("Hit");
        if (other.name == "Player" && !isTalking)
        {
            if (Input.GetKey(KeyCode.E))
            {
                Debug.Log("HitPlayer");
                isTalking = true;
                currentLine = 0;

                thePlayer = player.GetComponent<Player>();
                thePlayer.enabled = false;
                StartCoroutine(StartScrolling());
                playerTalking = true;
            }
        }
    }

    private IEnumerator StartScrolling()
    {
        isTextScrolling = true;
        int startLine = currentLine;
        string displayText = "";
        for (int i = 0; i < talkLines[currentLine].Length; ++i)
        {
            if (isTextScrolling && currentLine == startLine)
            {
                displayText += talkLines[currentLine][i];
                talkTextGUI.text = displayText;

                if (currentLine == 0)
                {
                    // First line
                    textures[currentLine].enabled = true;
                }
                else if (currentLine < talkLines.Length)
                {
                    // Middle lines
                    textures[currentLine - 1].enabled = false;
                    textures[currentLine].enabled = true;
                }
                yield return new WaitForSeconds(textScrollSpeed / 100);
            }
        }

        isTextScrolling = false;
    }

    void ExitDialogue()
    {
        currentLine = 0;
        talkTextGUI.text = "";
        isTalking = false;
        isTextScrolling = false;
        for (int i = 0; i < textures.Length; ++i)
        {
            textures[i].enabled = false;
        }
        thePlayer.enabled = true;
        playerTalking = false;
    }

    // Update is called once per frame
    void Update()
    {
        if (isTalking)
        {
            if (isQuestable && gameObject.GetComponent<KillEnemyQuest>().inProgress && gameObject.GetComponent<KillEnemyQuest>().TryToReturnQuest())
            {
                talkLines[0] = kQuestCompleteMessage;
            }

            if (Input.GetKeyUp(KeyCode.End) || Input.GetKey(KeyCode.Space))
            {
                ExitDialogue();
                return;
            }
            if (Input.GetButtonUp("Fire1"))
            {
                Debug.Log("Scrolling");
                if (isTextScrolling)
                {
                    talkTextGUI.text = talkLines[currentLine];
                    isTextScrolling = false;
                    
                }
                else
                {
                    if (currentLine < talkLines.Length - 1)
                    {
                        Debug.Log("Line change");
                        currentLine++;
                        StartCoroutine(StartScrolling());
                        //StartScrolling();
                    }
                    else
                    {
                        // Acquired quest
						if (isQuestable)
                        {
                            if (!gameObject.GetComponent<KillEnemyQuest>().inProgress)
                            {
                                //gameObject.GetComponent<KillEnemyQuest>().SpawnEnemies();
                                gameObject.GetComponent<KillEnemyQuest>().Acquired();

                                talkLines = new string[1];
                                talkLines[0] = kQuestIncompleteMessage;
                            }
                            else
                            {
                                
                            }
						}
                        // Dialogue finished
                        ExitDialogue();
                        // Last line is done
                    }
                }
            }
        }
	}
}
