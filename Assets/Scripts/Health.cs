using UnityEngine;
using System.Collections;

public class Health : MonoBehaviour
{

    public int TotalHitPoints = 3;   //total number of hit points/life
    public int CurHitPoints = 3;   //current number of hit points

    private int numberOfDeaths = 0;
    //private SpriteRenderer health;
    //private Vector3 healthScale;				// The local scale of the health bar initially (with full health).
	// Use this for initialization
	void Start ()
    {

	}

    void Awake()
    {
        //for (int i = 0; i < GetComponentsInChildren<SpriteRenderer>().Length; ++i)
        //{
        //    if (GetComponentsInChildren<SpriteRenderer>()[i].name == "HealthMeter")
        //    {
        //        health = GetComponentsInChildren<SpriteRenderer>()[i];
        //        healthScale = health.transform.localScale;
        //        break;
        //    }
        //}
    }

	// Update is called once per frame
	void Update ()
    {
        //// Set the health bar's colour to proportion of the way between green and red based on the player's health.
        //health.material.color = Color.Lerp(Color.green, Color.red, ((float)GetComponent<Health>().CurHitPoints / (float)GetComponent<Health>().TotalHitPoints) * 0.01f);

        //// Set the scale of the health bar to be proportional to the player's health.
        //health.transform.localScale = new Vector3(healthScale.x * (float)GetComponent<Health>().CurHitPoints * 0.01f, 1, 1);
        if (gameObject.name == "Player")
        {
            if (CurHitPoints <= 0)
            {
                numberOfDeaths++;
                // Player died, respawn
                GameObject.Find("DeathCounter").GetComponent<GUIText>().text = "Deaths: " + numberOfDeaths;
                SoundEffectsHelper.Instance.MakePlayerDeathSound();
                Vector3 closestLocation = Vector3.zero;
                float distanceApart = float.MaxValue;
                Debug.Log("Spawns: " + Global.Instance.playerSpawnLocations.Count);
                foreach (GameObject spawnLocation in Global.Instance.playerSpawnLocations)
                {
                    float newDistance = Vector3.Distance(Player.Instance.transform.position, spawnLocation.transform.position);
                    if (distanceApart > newDistance)
                    {
                        distanceApart = newDistance;
                        closestLocation = spawnLocation.transform.position;
                    }
                }

                Player.Instance.GetComponent<Health>().CurHitPoints = Player.Instance.GetComponent<Health>().TotalHitPoints;

                // Spawn the player at the closest spawn point:
                Player.Instance.transform.position = closestLocation;
            }
        }
	}
}
