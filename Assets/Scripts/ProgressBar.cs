using UnityEngine;
using System.Collections;

public class ProgressBar : MonoBehaviour
{
    public float barDisplay; //current progress
    public Vector2 pos = new Vector2(20, 40);
    public Vector2 size = new Vector2(60, 20);
    public Texture2D healthSkin;
    public float maximum = 100.0f;

    private SpriteRenderer health;
    private Vector3 healthScale;				// The local scale of the health bar initially (with full health).
    private static float healthBarNormalizedXPosition = 0.01f;
    private static float healthBarNormalizedYPosition = 0.01f;
    private static float healthBarNormalizedWidth = 0.24f;//0.20f;
    private static float healthBarNormalizedHeight = 0.08f;//0.05f;
    void Awake()
    {
        for (int i = 0; i < GetComponentsInChildren<SpriteRenderer>().Length; ++i)
        {
            if (GetComponentsInChildren<SpriteRenderer>()[i].name == "HealthMeter")
            {
                //Debug.Log("Found health meter.");
                health = GetComponentsInChildren<SpriteRenderer>()[i];
                healthScale = health.transform.localScale;
                break;
            }
        }
    }

    // Update is called once per frame
    void Update()
    {
        // Set the health bar's colour to proportion of the way between green and red based on the player's health.
        
       
    }

    void OnGUI()
    {
        float currentHealth = 0.0f;
        float totalHealth = 0.0f;
        Enemy enemy = transform.parent.gameObject.GetComponent<Enemy>();
        if (transform.parent.name == "Player" && enemy == null)
        {
            currentHealth = transform.parent.gameObject.GetComponent<Health>().CurHitPoints;
            totalHealth = transform.parent.gameObject.GetComponent<Health>().TotalHitPoints;
            //Debug.Log("Curr: " + currentHealth + " total: " + totalHealth);
        }
        else
        {
            currentHealth = enemy.CurHitPoints;
            totalHealth = enemy.TotalHitPoints;
        }

        float healthRemainingFactor = (currentHealth / totalHealth);
        //Debug.Log("Health remain factor:" + healthRemainingFactor);
        health.material.color = Color.Lerp(Color.blue, Color.red, 1.0f - healthRemainingFactor);

        if (transform.parent.name == "Player")
        {
            // Set the scale of the health bar to be proportional to the player's health.
            health.transform.localScale = new Vector3(healthScale.x * healthRemainingFactor, 1, 1);
            GUI.color = Color.gray;
            Vector3 location = Camera.main.ViewportToScreenPoint(new Vector3(healthBarNormalizedXPosition, healthBarNormalizedYPosition, 0.0f));
            Rect pos = new Rect(location.x, location.y,
                (Camera.main.pixelWidth * healthBarNormalizedWidth),
                (Camera.main.pixelHeight * healthBarNormalizedHeight));
            GUI.color = Color.white;
            pos.width = Camera.main.pixelWidth * healthBarNormalizedWidth;
            GUI.DrawTexture(pos, healthSkin);
            GUI.color = health.material.color;
            pos.y += (pos.height * 0.1f);
            pos.x += 3;
            pos.width *= 0.73f;
            pos.width *= healthRemainingFactor;
            pos.height *= 0.8f;
            GUI.DrawTexture(pos, health.sprite.texture);
        }
        else
        {
            // Set the scale of the health bar to be proportional to the player's health.
            health.transform.localScale = new Vector3(healthScale.x * healthRemainingFactor, 1, 1);

        }

    }



    /*void OnGUI()
    {
        
        //draw the background:
        // World
        Vector3 healthWorldCoordinate = new Vector3(transform.parent.position.x, transform.parent.position.y + transform.parent.renderer.bounds.extents.y, transform.parent.position.z);
        Vector3 screenPosition = Camera.main.WorldToScreenPoint(healthWorldCoordinate);

        //GUI.color = Color.blue;
        GUI.backgroundColor = Color.black;
        GUI.Button(new Rect(screenPosition.x - (size.x / 2), Screen.height - screenPosition.y, size.x, size.y), "");
        GUI.backgroundColor = Color.green;

        float currentHealth = 0.0f;
        float totalHealth = 0.0f;
        Enemy enemy = transform.parent.gameObject.GetComponent<Enemy>();
        if (enemy == null)
        {
            currentHealth = transform.parent.gameObject.GetComponent<Health>().CurHitPoints;
            totalHealth = transform.parent.gameObject.GetComponent<Health>().TotalHitPoints;
            Debug.Log("Curr: " + currentHealth + " total: " + totalHealth);
        }
        else
        {
            currentHealth = enemy.CurHitPoints;
            totalHealth = enemy.TotalHitPoints;
        }

        if (currentHealth > 0.0f)
            GUI.Button(new Rect(screenPosition.x - (size.x / 2), Screen.height - screenPosition.y, size.x * (currentHealth / totalHealth), size.y), "");
        

        //GUI.Box(new Rect(screenPosition.x - (size.x / 2), Screen.height - screenPosition.y, size.x, size.y));
        //Debug.LogError("Position" + transform.parent.position.y);

        //GUI.Label(new Rect(screenPosition.x, -screenPosition.y, size.x, size.y), "Test");

        //GUI.BeginGroup(new Rect(screenPosition.x - (size.x / 2), Screen.height - screenPosition.y, size.x, size.y));  //new Rect(screenPosition.x, screenPosition.y, size.x, size.y));
        //GUI.Box(new Rect(0, 0, size.x, size.y), emptyTex);

        ////draw the filled-in part:
        //GUI.BeginGroup(new Rect(0, 0, 1000f, size.y));
        //GUI.Box(new Rect(0, 0, size.x, size.y), fullTex);
        ////Debug.LogError("D " + barDisplay);
        //GUI.EndGroup();
        //GUI.EndGroup();
    }*/

    public void Increase()
    {


        //transform.parent.gameObject.GetComponent<Enemy>().CurHitPoints++;

        //barDisplay += 1.0f;
        //if (barDisplay > maximum)
        //    barDisplay = maximum;
    }

    public void Decrease()
    {

        //transform.parent.gameObject.GetComponent<Enemy>().CurHitPoints--;


        //barDisplay -= 1.0f;
        //if (barDisplay <= 0.0f)
        //{
        //    if (transform.parent.name != "Player")
        //    {
        //        // Unit death
        //        //SoundEffectsHelper.Instance.MakeRobotDeathSound();
        //        //SpecialEffectsHelper.Instance.explosionEffect.startColor =
        //        //    transform.parent.gameObject.GetComponent<SpriteRenderer>().color;
        //        Bounds otherBounds = transform.parent.gameObject.GetComponent<Renderer>().bounds;
        //        //SpecialEffectsHelper.Instance.Explosion(otherBounds.min + (otherBounds.extents / 2));
        //        Destroy(transform.parent.gameObject);
        //        barDisplay = 0.0f;
        //    }
        //    else
        //    {
        //        //FirstGameManager.TheGameState.SetCurrentLevel ("Lose");
        //        //FirstGameManager.TheGameState.PrintCurrentLevel ();
        //        //Application.LoadLevel ("Lose");
        //        barDisplay = maximum;
        //    }
        //}
    }

	// Use this for initialization
	void Start ()
    {
	
	}

}
