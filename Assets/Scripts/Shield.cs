using UnityEngine;
using System.Collections;

public class Shield : MonoBehaviour
{

    private static Vector3 upperLeftDirection = new Vector3(-Mathf.Cos(Mathf.PI / 4), Mathf.Sin(Mathf.PI / 4), 0.0f);
    private static Vector3 upperRightDirection = new Vector3(Mathf.Cos(Mathf.PI / 4), Mathf.Sin(Mathf.PI / 4), 0.0f);
    private static Vector3 lowerLeftDirection = new Vector3(-Mathf.Cos(Mathf.PI / 4), -Mathf.Sin(Mathf.PI / 4), 0.0f);
    private static Vector3 lowerRightDirection = new Vector3(Mathf.Cos(Mathf.PI / 4), -Mathf.Sin(Mathf.PI / 4), 0.0f);

	// Use this for initialization
	void Start ()
    {
	
	}
	
	// Update is called once per frame
	void Update ()
    {
	
	}

    void OnTriggerEnter2D(Collider2D other)
    {
        //Debug.Log("Object hit me");
        //if (other.name == "EnemyProjectile(Clone)")
        //{
        //    SoundEffectsHelper.Instance.MakeHitSound();
        //    Destroy(other.gameObject);
        //}

        Vector3 playerPositionOnScreen = Camera.main.WorldToScreenPoint(transform.position);
        Vector3 otherRelativePosition = Camera.main.WorldToScreenPoint(other.gameObject.transform.position);
        otherRelativePosition.z = 0.0f;
        playerPositionOnScreen.y = Screen.height - playerPositionOnScreen.y;
        playerPositionOnScreen.z = 0.0f;
        Vector3 targetDirection = otherRelativePosition - playerPositionOnScreen;
        targetDirection.Normalize(); // B

        // A = lowerRightDirection
        // B = targetDirection
        // C = upperRightDirection
        
        if (Player.Instance != null && Player.Instance.isBlocking && other.name == "ProjectileEnemy(Clone)")
        {
            // AxB * AxC
            // CxB * CxA
            bool isHit = false;
            if ((lowerRightDirection.y * targetDirection.x - lowerRightDirection.x * targetDirection.y) * (lowerRightDirection.y * upperRightDirection.x - lowerRightDirection.x * upperRightDirection.y) >= 0 &&
                (upperRightDirection.y * targetDirection.x - upperRightDirection.x * targetDirection.y) * (upperRightDirection.y * lowerRightDirection.x - upperRightDirection.x * lowerRightDirection.y) >= 0)
            {
                Debug.LogError("Spam1");
                // right
                if (Player.Instance.mouseDirection == Player.MouseDirectionState.kRight)
                {
                    isHit = true;
                }
            }
            else if ((upperLeftDirection.y * targetDirection.x - upperLeftDirection.x * targetDirection.y) * (upperLeftDirection.y * upperRightDirection.x - upperLeftDirection.x * upperRightDirection.y) >= 0)
            {
                Debug.LogError("Spam2");
                // up
                if (Player.Instance.mouseDirection == Player.MouseDirectionState.kUp)
                {
                    isHit = true;
                }
            }
            else if ((lowerLeftDirection.y * targetDirection.x - lowerLeftDirection.x * targetDirection.y) * (lowerLeftDirection.y * lowerRightDirection.x - lowerLeftDirection.x * lowerRightDirection.y) >= 0)
            {
                Debug.LogError("Spam3");
                // down
                if (Player.Instance.mouseDirection == Player.MouseDirectionState.kDown)
                {
                    isHit = true;
                }
            }
            else if ((lowerLeftDirection.y * targetDirection.x - lowerLeftDirection.x * targetDirection.y) * (lowerLeftDirection.y * upperLeftDirection.x - lowerLeftDirection.x * upperLeftDirection.y) >= 0)
            {
                Debug.LogError("Spam4");
                // left
                if (Player.Instance.mouseDirection == Player.MouseDirectionState.kLeft)
                {
                    isHit = true;
                }
            }

            if (isHit) // and CD
            {
                Debug.LogError("Blocked!!!");
                Player.Instance.GetComponent<Health>().CurHitPoints += other.GetComponent<Projectile>().Damage;
                // gameObject.GetComponent<Health>().CurHitPoints -= other.GetComponent<Projectile>().Damage;
                SoundEffectsHelper.Instance.MakeShieldHitSound();
                Destroy(other.gameObject);
            }
        }


    }
}
